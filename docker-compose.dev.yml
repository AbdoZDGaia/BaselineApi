services:
  api:
    build:
      context: ./Sql.Baseline.Api
      dockerfile: Dockerfile
      target: build # Stop at build stage for development
      cache_from:
        - baselineapi-api:dev
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: baselineapi-api:dev
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__Default: Host=sql;Database=BaselineDb;Username=sa;Password=P@ssw0rd;
      Redis__ConnectionString: redis:6379,abortConnect=false
      Jwt__Authority: https://baselinedoz.example.com/
      Jwt__Audience: sql-baseline-api
      Jwt__IssuerSigningKey: your-super-secret-key-with-at-least-32-characters
      Jwt__TokenExpirationMinutes: 60
    ports:
      - "8080:8080"
    depends_on:
      sql:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    # Development: mount source code for hot reload
    volumes:
      - ./Sql.Baseline.Api:/src
      - /src/bin
      - /src/obj
    command: dotnet watch run --urls http://+:8080

  sql:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: BaselineDb
      POSTGRES_USER: sa
      POSTGRES_PASSWORD: P@ssw0rd
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sa -d BaselineDb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    volumes:
      - sql-data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    volumes:
      - redis-data:/data

volumes:
  sql-data:
  redis-data:
